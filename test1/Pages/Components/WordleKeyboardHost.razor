@using System.Collections.Generic
@using WordleGuesser
@using WordleGuesser.Classes
@using test1.Pages.Components
@using Microsoft.AspNetCore.Components.Web
@using test1.Wordle.Classes;
@inject Stats stats

<div @ref="ContainerRef" tabindex="0" @onkeydown="HandleKeyboardEvent" style="outline:none">


    <div style="display:contents; padding:8px; background:#f3f3f3; border-radius:6px;">
        @for (int r = 0; r < 6; r++)
        {
            <div class="row">
                @for (int c = 0; c < 5; c++)
                {
                    var ch = GetCellChar(r, c);
                    var color = GetCellColor(r, c);
                    <div class="tile @GetTileClass(color)">
                        @ch
                    </div>
                }
            </div>
        }
    </div>

    <style>
        .row {
            display: flex;
            gap: 6px;
            margin: 6px 0;
			justify-content: center;
        }
        .tile {
            width: 48px;
            height: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 700;
            font-size: 20px;
            border-radius: 6px;
            background: var(--extra-light-gray, #e9e9e9);
            color: var(--wordleBlack, #212121);
            border: 2px solid rgba(0,0,0,0.06);
            text-transform: uppercase;
        }

            .tile.correct {
                background: #6aaa64;
                color: white;
            }

            .tile.present {
                background: #c9b458;
                color: white;
            }

            .tile.grey {
                background: #787c7e;
                color: white;
            }
    </style>

    <PlayerKeyboard KeyStates="KeyStates"
                    DisabledKeys="DisabledKeys"
                    OnKeyPressed="HandleKey" />
</div>

@code {
    private ElementReference ContainerRef;
    private bool _shouldFocus;

    [Parameter]
    public string Solution { get; set; }

    [Parameter]
    public EventCallback OnGameCompleted { get; set; }

    private int CurrentRow { get; set; } = 0;
    private string CurrentGuess { get; set; } = "";
    private List<WordGuessResponse?> Guesses { get; set; } = new();
    private string StatusMessage { get; set; } = "";

    private Dictionary<string, PlayerKeyboard.KeyState> KeyStates { get; set; } = new();
    private HashSet<string> DisabledKeys => BuildDisabledKeys();

    protected override async Task OnInitializedAsync()
    {
        await stats.LoadAsync();

        StartNewGame();
        
        // Restore previous game safely (stats.Guesses may be null)
        if (stats.LastPlayed.HasValue && stats.LastPlayed.Value.Date == DateTime.Today)
        {
            var savedGuesses = stats.Guesses ?? new List<WordGuessResponse?>();
            Guesses = savedGuesses
                .Take(6) // in case too many
                .Concat(Enumerable.Repeat<WordGuessResponse?>(null, 6)) // pad to 6
                .Take(6) // final length 6
                .ToList();
			OnGameCompleted.InvokeAsync(null); 
        }
        CurrentRow = Guesses.Count(g => g != null); // continue after last guess
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_shouldFocus)
        {
            _shouldFocus = false;
            try { await ContainerRef.FocusAsync(); }
            catch { }
        }
    }

    private void StartNewGame()
    {
        Solution = (Solution ?? "").Trim().ToLowerInvariant();
        if (string.IsNullOrWhiteSpace(Solution) || Solution.Length != 5)
        {
            StatusMessage = "Enter a 5-letter solution first.";
            return;
        }

        CurrentRow = 0;
        CurrentGuess = "";
        StatusMessage = "";
        Guesses = Enumerable.Repeat<WordGuessResponse?>(null, 6).ToList();

        KeyStates = "abcdefghijklmnopqrstuvwxyz".ToDictionary(c => c.ToString(), c => PlayerKeyboard.KeyState.Default);
        _shouldFocus = true;
    }

    private async Task HandleKey(string key)
    {
        if (string.IsNullOrEmpty(key)) return;

        key = NormalizeKey(key);

        if (IsGameOver()) return;

        switch (key)
        {
            case "backspace":
                if (CurrentGuess.Length > 0)
                    CurrentGuess = CurrentGuess[..^1];
                break;

            case "enter":
                if (CurrentGuess.Length == 5)
                    SubmitGuess();
                break;

            default:
                if (key.Length == 1 && char.IsLetter(key[0]) && CurrentGuess.Length < 5)
                    CurrentGuess += key;
                break;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task HandleKeyboardEvent(KeyboardEventArgs e)
    {
        await HandleKey(e.Key);
    }

    private string NormalizeKey(string key)
    {
        key = key.ToLowerInvariant();
        return key switch
        {
            "back" => "backspace",
            "backspace" => "backspace",
            "enter" => "enter",
            _ => key
        };
    }

    private void SubmitGuess()
    {
        StatusMessage = "";
        if (CurrentGuess.Length != 5 || CurrentRow >= 6 || !Utilitys.IsWordInText(CurrentGuess, "WordleWords.txt")) return;

        var response = new WordGuessResponse(Solution, CurrentGuess);
        Guesses[CurrentRow] = response;
        UpdateKeyboardState(response);

        if (CurrentGuess.Equals(Solution, StringComparison.OrdinalIgnoreCase))
        {
            StatusMessage = $"Solved in {CurrentRow + 1} guess(es)!";
            CurrentRow = 6;
            CurrentGuess = "";
            stats.FinishGame(true, Guesses);
            OnGameCompleted.InvokeAsync(null);
            return;
        }

        CurrentRow++;
        CurrentGuess = "";

        if (CurrentRow >= 6)
        {
            StatusMessage = $"Game over — solution: {Solution.ToUpperInvariant()}";
            stats.FinishGame(false, Guesses);
            OnGameCompleted.InvokeAsync(null);
        }
    }

    private void UpdateKeyboardState(WordGuessResponse response)
    {
        for (int i = 0; i < 5; i++)
        {
            var letter = response.Word[i].ToString().ToLowerInvariant();
            var newState = response.Colors[i] switch
            {
                ResponseColor.green => PlayerKeyboard.KeyState.Correct,
                ResponseColor.yellow => PlayerKeyboard.KeyState.Present,
                ResponseColor.grey => PlayerKeyboard.KeyState.Absent,
                _ => PlayerKeyboard.KeyState.Default
            };

            if (!KeyStates.TryGetValue(letter, out var existing))
                KeyStates[letter] = newState;
            else
                KeyStates[letter] = MaxState(existing, newState);
        }
    }

    private PlayerKeyboard.KeyState MaxState(PlayerKeyboard.KeyState a, PlayerKeyboard.KeyState b)
    {
        return (PlayerKeyboard.KeyState)Math.Max((int)a, (int)b);
    }

    private bool IsGameOver() => CurrentRow >= 6;

    // Guarded: check bounds and nulls before indexing Guesses
    private char GetCellChar(int row, int col)
    {
        if (row < 0 || col < 0) return ' ';

        if (row < Guesses.Count && Guesses[row] != null)
        {
            var word = Guesses[row]!.Word;
            if (!string.IsNullOrEmpty(word) && col < word.Length)
                return char.ToUpperInvariant(word[col]);
            return ' ';
        }
        else if (row == CurrentRow && col < CurrentGuess.Length)
            return char.ToUpperInvariant(CurrentGuess[col]);

        return ' ';
    }

    // Guarded: ensure Colors list exists and index is in range
    private ResponseColor? GetCellColor(int row, int col)
    {
        if (row < 0 || col < 0) return null;

        if (row < Guesses.Count && Guesses[row] != null)
        {
            var colors = Guesses[row]!.Colors;
            if (colors != null && col < colors.Count)
                return colors[col];
        }

        return null;
    }

    private string GetTileClass(ResponseColor? color)
    {
        return color switch
        {
            ResponseColor.green => "correct",
            ResponseColor.yellow => "present",
            ResponseColor.grey => "grey",
            _ => ""
        };
    }

    private HashSet<string> BuildDisabledKeys()
    {
        var set = new HashSet<string>();
        if (CurrentGuess.Length < 5 || IsGameOver()) set.Add("enter");
        if (CurrentGuess.Length == 0 || IsGameOver()) set.Add("backspace");
        return set;
    }
}
